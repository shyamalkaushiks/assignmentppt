ue 1

import java.util.Arrays;

public class ArrayPairSum {
    public int arrayPairSum(int[] nums) {

        Arrays.sort(nums);

        int sum = 0;

        for (int i = 0; i < nums.length; i += 2) {
            // Add the minimum value of each pair to the sum
            sum += nums[i];
        }

        return sum;
    }

    public static void main(String[] args) {
        ArrayPairSum solution = new ArrayPairSum();
        int[] nums = {1, 4, 3, 2, 7, 6};
        int maxSum = solution.arrayPairSum(nums);
        System.out.println("Maximized sum: " + maxSum);
    }
}


Que 2

import java.util.HashSet;
import java.util.Set;

public class MaxCandies {
    public int maxCandies(int[] candyType) {
        int maxAllowed = candyType.length / 2; 
        Set<Integer> uniqueCandies = new HashSet<>();

        for (int candy : candyType) {
            uniqueCandies.add(candy);
            if (uniqueCandies.size() == maxAllowed) {

                break;
            }
        }

        return uniqueCandies.size();
    }

    public static void main(String[] args) {
        MaxCandies solution = new MaxCandies();
        int[] candyType = {1, 1, 2, 2, 3, 3};
        int maxUniqueCandies = solution.maxCandies(candyType);
        System.out.println("Max number of different candies Alice can eat: " + maxUniqueCandies);
    }
}

Que 3

import java.util.HashMap;
import java.util.Map;

public class LongestHarmoniousSubsequence {
    public int findLHS(int[] nums) {
        Map<Integer, Integer> frequencyMap = new HashMap<>();
        int longestSubsequence = 0;

        // Count the frequency of each number in nums
        for (int num : nums) {
            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);
        }

        // Iterate over the frequency map
        for (int num : frequencyMap.keySet()) {
            if (frequencyMap.containsKey(num + 1)) {

                int subsequenceLength = frequencyMap.get(num) + frequencyMap.get(num + 1);
                longestSubsequence = Math.max(longestSubsequence, subsequenceLength);
            }
        }

        return longestSubsequence;
    }

    public static void main(String[] args) {
        LongestHarmoniousSubsequence solution = new LongestHarmoniousSubsequence();
        int[] nums = {1, 3, 2, 2, 5, 2, 3, 7};
        int longestSubsequenceLength = solution.findLHS(nums);
        System.out.println("Length of longest harmonious subsequence: " + longestSubsequenceLength);
    }
}

Que 4

public class FlowerPlanting {
    public boolean canPlaceFlowers(int[] flowerbed, int n) {
        int count = 0;
        int i = 0;

        while (i < flowerbed.length) {
            if (flowerbed[i] == 0 && (i == 0 || flowerbed[i - 1] == 0) && (i == flowerbed.length - 1 || flowerbed[i + 1] == 0)) {
                flowerbed[i] = 1;
                count++;
            }
            i++;
        }

        return count >= n;
    }

    public static void main(String[] args) {
        FlowerPlanting solution = new FlowerPlanting();
        int[] flowerbed = {1, 0, 0, 0, 1};
        int n = 1;
        boolean canPlace = solution.canPlaceFlowers(flowerbed, n);
        System.out.println("Can place " + n + " flowers: " + canPlace);
    }
}

Que 5

import java.util.Arrays;

public class MaxProductOfThree {
    public int maximumProduct(int[] nums) {
        Arrays.sort(nums);

        int product1 = nums[nums.length - 1] * nums[nums.length - 2] * nums[nums.length - 3];
        int product2 = nums[0] * nums[1] * nums[nums.length - 1];

        return Math.max(product1, product2);
    }

    public static void main(String[] args) {
        MaxProductOfThree solution = new MaxProductOfThree();
        int[] nums = {-4, -2, 1, 3, 5};
        int maxProduct = solution.maximumProduct(nums);
        System.out.println("Maximum product of three numbers: " + maxProduct);
    }
}

Que 6

public class BinarySearch {
    public int search(int[] nums, int target) {
        int left = 0;
        int right = nums.length - 1;

        while (left <= right) {
            int mid = left + (right - left) / 2;

            if (nums[mid] == target) {
                return mid; // Target found at index mid
            } else if (nums[mid] < target) {
                left = mid + 1; // Search in the right half
            } else {
                right = mid - 1; // Search in the left half
            }
        }

        return -1; // Target not found
    }

    public static void main(String[] args) {
        BinarySearch solution = new BinarySearch();
        int[] nums = {-1, 0, 3, 5, 9, 12};
        int target = 9;
        int index = solution.search(nums, target);
        System.out.println("Target index: " + index);
    }
}

Que 7

public class MonotonicArray {
    public boolean isMonotonic(int[] nums) {
        boolean increasing = true;
        boolean decreasing = true;

        for (int i = 1; i < nums.length; i++) {
            if (nums[i] < nums[i - 1]) {
                increasing = false;
            }
            if (nums[i] > nums[i - 1]) {
                decreasing = false;
            }
        }

        return increasing || decreasing;
    }

    public static void main(String[] args) {
        MonotonicArray solution = new MonotonicArray();
        int[] nums = {1, 2, 3, 4, 5};
        boolean isMonotonic = solution.isMonotonic(nums);
        System.out.println("Is the array monotonic? " + isMonotonic);
    }
}

Que 8

public class MinimizeScore {
    public int minimizeScore(int[] nums, int k) {
        int minScore = Integer.MAX_VALUE;

        for (int x = -k; x <= k; x++) {
            int minNum = Integer.MAX_VALUE;
            int maxNum = Integer.MIN_VALUE;

            for (int num : nums) {
                num += x;
                minNum = Math.min(minNum, num);
                maxNum = Math.max(maxNum, num);
            }

            int potentialScore = maxNum - minNum;
            minScore = Math.min(minScore, potentialScore);
        }

        return minScore;
    }

    public static void main(String[] args) {
        MinimizeScore solution = new MinimizeScore();
        int[] nums = {1, 3, 5};
        int k = 1;
        int minScore = solution.minimizeScore(nums, k);
        System.out.println("Minimum score of nums: " + minScore);
    }
}
